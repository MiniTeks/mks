/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/MiniTeks/mks-server/pkg/apis/mkscontroller/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MksPipelineLister helps list MksPipelines.
// All objects returned here must be treated as read-only.
type MksPipelineLister interface {
	// List lists all MksPipelines in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MksPipeline, err error)
	// MksPipelines returns an object that can list and get MksPipelines.
	MksPipelines(namespace string) MksPipelineNamespaceLister
	MksPipelineListerExpansion
}

// mksPipelineLister implements the MksPipelineLister interface.
type mksPipelineLister struct {
	indexer cache.Indexer
}

// NewMksPipelineLister returns a new MksPipelineLister.
func NewMksPipelineLister(indexer cache.Indexer) MksPipelineLister {
	return &mksPipelineLister{indexer: indexer}
}

// List lists all MksPipelines in the indexer.
func (s *mksPipelineLister) List(selector labels.Selector) (ret []*v1alpha1.MksPipeline, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MksPipeline))
	})
	return ret, err
}

// MksPipelines returns an object that can list and get MksPipelines.
func (s *mksPipelineLister) MksPipelines(namespace string) MksPipelineNamespaceLister {
	return mksPipelineNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MksPipelineNamespaceLister helps list and get MksPipelines.
// All objects returned here must be treated as read-only.
type MksPipelineNamespaceLister interface {
	// List lists all MksPipelines in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MksPipeline, err error)
	// Get retrieves the MksPipeline from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MksPipeline, error)
	MksPipelineNamespaceListerExpansion
}

// mksPipelineNamespaceLister implements the MksPipelineNamespaceLister
// interface.
type mksPipelineNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MksPipelines in the indexer for a given namespace.
func (s mksPipelineNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MksPipeline, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MksPipeline))
	})
	return ret, err
}

// Get retrieves the MksPipeline from the indexer for a given namespace and name.
func (s mksPipelineNamespaceLister) Get(name string) (*v1alpha1.MksPipeline, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("mkspipeline"), name)
	}
	return obj.(*v1alpha1.MksPipeline), nil
}
