/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/MiniTeks/mks-server/pkg/apis/mkscontroller/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MksPipelineRunLister helps list MksPipelineRuns.
// All objects returned here must be treated as read-only.
type MksPipelineRunLister interface {
	// List lists all MksPipelineRuns in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MksPipelineRun, err error)
	// MksPipelineRuns returns an object that can list and get MksPipelineRuns.
	MksPipelineRuns(namespace string) MksPipelineRunNamespaceLister
	MksPipelineRunListerExpansion
}

// mksPipelineRunLister implements the MksPipelineRunLister interface.
type mksPipelineRunLister struct {
	indexer cache.Indexer
}

// NewMksPipelineRunLister returns a new MksPipelineRunLister.
func NewMksPipelineRunLister(indexer cache.Indexer) MksPipelineRunLister {
	return &mksPipelineRunLister{indexer: indexer}
}

// List lists all MksPipelineRuns in the indexer.
func (s *mksPipelineRunLister) List(selector labels.Selector) (ret []*v1alpha1.MksPipelineRun, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MksPipelineRun))
	})
	return ret, err
}

// MksPipelineRuns returns an object that can list and get MksPipelineRuns.
func (s *mksPipelineRunLister) MksPipelineRuns(namespace string) MksPipelineRunNamespaceLister {
	return mksPipelineRunNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MksPipelineRunNamespaceLister helps list and get MksPipelineRuns.
// All objects returned here must be treated as read-only.
type MksPipelineRunNamespaceLister interface {
	// List lists all MksPipelineRuns in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MksPipelineRun, err error)
	// Get retrieves the MksPipelineRun from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MksPipelineRun, error)
	MksPipelineRunNamespaceListerExpansion
}

// mksPipelineRunNamespaceLister implements the MksPipelineRunNamespaceLister
// interface.
type mksPipelineRunNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MksPipelineRuns in the indexer for a given namespace.
func (s mksPipelineRunNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MksPipelineRun, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MksPipelineRun))
	})
	return ret, err
}

// Get retrieves the MksPipelineRun from the indexer for a given namespace and name.
func (s mksPipelineRunNamespaceLister) Get(name string) (*v1alpha1.MksPipelineRun, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("mkspipelinerun"), name)
	}
	return obj.(*v1alpha1.MksPipelineRun), nil
}
