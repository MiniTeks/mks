/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/MiniTeks/mks-server/pkg/apis/mkscontroller/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MksTaskLister helps list MksTasks.
// All objects returned here must be treated as read-only.
type MksTaskLister interface {
	// List lists all MksTasks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MksTask, err error)
	// MksTasks returns an object that can list and get MksTasks.
	MksTasks(namespace string) MksTaskNamespaceLister
	MksTaskListerExpansion
}

// mksTaskLister implements the MksTaskLister interface.
type mksTaskLister struct {
	indexer cache.Indexer
}

// NewMksTaskLister returns a new MksTaskLister.
func NewMksTaskLister(indexer cache.Indexer) MksTaskLister {
	return &mksTaskLister{indexer: indexer}
}

// List lists all MksTasks in the indexer.
func (s *mksTaskLister) List(selector labels.Selector) (ret []*v1alpha1.MksTask, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MksTask))
	})
	return ret, err
}

// MksTasks returns an object that can list and get MksTasks.
func (s *mksTaskLister) MksTasks(namespace string) MksTaskNamespaceLister {
	return mksTaskNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MksTaskNamespaceLister helps list and get MksTasks.
// All objects returned here must be treated as read-only.
type MksTaskNamespaceLister interface {
	// List lists all MksTasks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MksTask, err error)
	// Get retrieves the MksTask from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MksTask, error)
	MksTaskNamespaceListerExpansion
}

// mksTaskNamespaceLister implements the MksTaskNamespaceLister
// interface.
type mksTaskNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MksTasks in the indexer for a given namespace.
func (s mksTaskNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MksTask, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MksTask))
	})
	return ret, err
}

// Get retrieves the MksTask from the indexer for a given namespace and name.
func (s mksTaskNamespaceLister) Get(name string) (*v1alpha1.MksTask, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("mkstask"), name)
	}
	return obj.(*v1alpha1.MksTask), nil
}
