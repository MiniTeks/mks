/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/MiniTeks/mks-server/pkg/apis/mkscontroller/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MksTaskRunLister helps list MksTaskRuns.
// All objects returned here must be treated as read-only.
type MksTaskRunLister interface {
	// List lists all MksTaskRuns in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MksTaskRun, err error)
	// MksTaskRuns returns an object that can list and get MksTaskRuns.
	MksTaskRuns(namespace string) MksTaskRunNamespaceLister
	MksTaskRunListerExpansion
}

// mksTaskRunLister implements the MksTaskRunLister interface.
type mksTaskRunLister struct {
	indexer cache.Indexer
}

// NewMksTaskRunLister returns a new MksTaskRunLister.
func NewMksTaskRunLister(indexer cache.Indexer) MksTaskRunLister {
	return &mksTaskRunLister{indexer: indexer}
}

// List lists all MksTaskRuns in the indexer.
func (s *mksTaskRunLister) List(selector labels.Selector) (ret []*v1alpha1.MksTaskRun, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MksTaskRun))
	})
	return ret, err
}

// MksTaskRuns returns an object that can list and get MksTaskRuns.
func (s *mksTaskRunLister) MksTaskRuns(namespace string) MksTaskRunNamespaceLister {
	return mksTaskRunNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MksTaskRunNamespaceLister helps list and get MksTaskRuns.
// All objects returned here must be treated as read-only.
type MksTaskRunNamespaceLister interface {
	// List lists all MksTaskRuns in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MksTaskRun, err error)
	// Get retrieves the MksTaskRun from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MksTaskRun, error)
	MksTaskRunNamespaceListerExpansion
}

// mksTaskRunNamespaceLister implements the MksTaskRunNamespaceLister
// interface.
type mksTaskRunNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MksTaskRuns in the indexer for a given namespace.
func (s mksTaskRunNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MksTaskRun, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MksTaskRun))
	})
	return ret, err
}

// Get retrieves the MksTaskRun from the indexer for a given namespace and name.
func (s mksTaskRunNamespaceLister) Get(name string) (*v1alpha1.MksTaskRun, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("mkstaskrun"), name)
	}
	return obj.(*v1alpha1.MksTaskRun), nil
}
